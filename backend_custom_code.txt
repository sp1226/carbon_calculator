=== backend/calculator/models.py ===
from django.db import models

class CarbonCalculation(models.Model):
    variable1 = models.FloatField()
    variable2 = models.FloatField()
    
    predicted_emission = models.FloatField(null=True, blank=True)
    
    def __str__(self):
        return f'Calculation {self.id}'=== backend/calculator/serializers.py ===
from rest_framework import serializers
from .models import CarbonCalculation

class CarbonCalculationSerializer(serializers.ModelSerializer):
    class Meta:
        model = CarbonCalculation
        fields = '__all__'
        read_only_fields = ('predicted_emission',)=== backend/calculator/management/commands/train_model.py ===
from django.core.management.base import BaseCommand
import pandas as pd
import numpy as np
from tensorflow import keras
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
import os

class Command(BaseCommand):
    help = '탄소 배출량 예측 모델을 학습합니다.'
    
    def handle(self, *args, **options):
        self.stdout.write('데이터 로딩 중...')
        data = pd.read_csv('/Users/sp/Documents/dataset/materials_carbon_emission.csv')
        
        X = data[['variable1', 'variable2', 'variable3']]
        y = data['carbon_emission']
        
        scaler = StandardScaler()
        X_scaled = scaler.fit_transform(X)
        
        scaler_path = os.path.join('calculator', 'models', 'scaler.joblib')
        from joblib import dump
        dump(scaler, scaler_path)
        
        X_train, X_val, y_train, y_val = train_test_split(X_scaled, y, test_size=0.2, random_state=42)
        
        model = keras.Sequential([
            keras.layers.Dense(64, activation='relu', input_shape=(X_train.shape[1],)),
            keras.layers.Dense(32, activation='relu'),
            keras.layers.Dense(1)
        ])
        
        self.stdout.write('모델 학습 중...')
        model.fit(X_train, y_train, epochs=50, batch_size=32, validation_data=(X_val, y_val))
        
        model_path = os.path.join('calculator', 'models', 'carbon_emission_model.h5')
        model.save(model_path)
        self.stdout.write(self.style.SUCCESS(f'모델 학습 완료. 모델이 {model_path}에 저장되었습니다.'))=== backend/calculator/management/commands/__init__.py ===
=== backend/calculator/__init__.py ===
=== backend/calculator/apps.py ===
from django.apps import AppConfig


class CalculatorConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'calculator'
=== backend/calculator/admin.py ===
from django.contrib import admin

# Register your models here.
=== backend/calculator/tests.py ===
from django.test import TestCase

# Create your tests here.
=== backend/calculator/views.py ===
# calculator/views.py

import os
from django.conf import settings
from rest_framework import viewsets, status
from rest_framework.response import Response
from .models import CarbonCalculation
from .serializers import CarbonCalculationSerializer
import tensorflow as tf
import numpy as np
from joblib import load

class CarbonCalculationViewSet(viewsets.ModelViewSet):
    queryset = CarbonCalculation.objects.all()
    serializer_class = CarbonCalculationSerializer

    # 모델 및 스케일러 로드
    model_path = os.path.join(settings.BASE_DIR, 'calculator', 'models', 'carbon_emission_model.h5')
    scaler_path = os.path.join(settings.BASE_DIR, 'calculator', 'models', 'scaler.joblib')
    model = tf.keras.models.load_model(model_path)
    scaler = load(scaler_path)

    def create(self, request, *args, **kwargs):
        serializer = self.get_serializer(data=request.data)
        serializer.is_valid(raise_exception=True)

        # 입력 변수 추출
        production_volume = serializer.validated_data.get('production_volume')
        energy_consumption = serializer.validated_data.get('energy_consumption')
        transport_distance = serializer.validated_data.get('transport_distance')
        recycled_content = serializer.validated_data.get('recycled_content')

        # 입력 데이터 전처리
        input_data = np.array([[production_volume, energy_consumption, transport_distance, recycled_content]])
        input_data_scaled = self.scaler.transform(input_data)

        # 예측 수행
        prediction = self.model.predict(input_data_scaled)

        # 결과 저장
        serializer.save(carbon_emission=prediction[0][0])

        headers = self.get_success_headers(serializer.data)
        return Response(serializer.data, status=status.HTTP_201_CREATED, headers=headers)=== backend/backend/asgi.py ===
"""
ASGI config for backend project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/howto/deployment/asgi/
"""

import os

from django.core.asgi import get_asgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'backend.settings')

application = get_asgi_application()
=== backend/backend/__init__.py ===
=== backend/backend/settings.py ===
from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-hzv*etpt1g*^9=5533*jt+w)_(0hul&ms7(mn4a5!08*gzy4+='

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'corsheaders',
    'calculator',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'backend.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.environ.get('POSTGRES_DB', 'carboncalculator'),
        'USER': os.environ.get('POSTGRES_USER', 'sp'),
        'PASSWORD': os.environ.get('POSTGRES_PASSWORD', '1234'),
        'HOST': 'db',
        'PORT': 5432,
    }
}

CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",
    "http://127.0.0.1:3000",
]

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
=== backend/backend/urls.py ===
from django.contrib import admin
from django.urls import path, include
from rest_framework.routers import DefaultRouter
from calculator.views import CarbonCalculationViewSet

router = DefaultRouter()
router.register(r'calculations', CarbonCalculationViewSet)

urlpatterns = [
    path('admin/', admin.site.urls),
    path('api/', include(router.urls)),
]
=== backend/backend/wsgi.py ===
"""
WSGI config for backend project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'backend.settings')

application = get_wsgi_application()
=== backend/manage.py ===
#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    """Run administrative tasks."""
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'backend.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == '__main__':
    main()
