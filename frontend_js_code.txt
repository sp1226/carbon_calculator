=== frontend/src/reportWebVitals.js ===
const reportWebVitals = onPerfEntry => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;
=== frontend/src/index.js ===
import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';
import reportWebVitals from './reportWebVitals';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();
=== frontend/src/App.test.js ===
import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});
=== frontend/src/setupTests.js ===
// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';
=== frontend/src/App.js ===
import React, { useState } from 'react';
import axios from 'axios';

function App() {
  const [formData, setFormData] = useState({
    model_name: '',
    training_time: '',
    gpu_type: '',
  });
  const [result, setResult] = useState(null);

  const handleChange = (e) => {
    setFormData({ ...formData, [e.target.name]: e.target.value });
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      const response = await axios.post('http://localhost:8000/api/calculations/', formData);
      setResult(response.data);
    } catch (error) {
      console.error('Error:', error);
    }
  };

  return (
    <div classname="App">
      <h1>Deep Learning Carbon Emission Calculator</h1>
      <form onSubmit={handleSubmit}>
        <input
          type="text"
          name="model_name"
          placeholder="Model Name"
          onChange={handleChange}
          required
        />
        <input
          type="number"
          name="training_time"
          placeholder="Training Time (hours)"
          onChange={handleChange}
          required
        />
        <input
          type="text"
          name="gpu_type"
          placeholder="GPU Type"
          onChange={handleChange}
          required
        />
        <button type="submit">Calculate</button>
      </form>
      {result && (
        <div>
          <h2>Result</h2>
          <p>Carbon Emitted: {result.carbon_emitted} kg CO2</p>
        </div>
      )}
    </div>
  );
}

export default App;